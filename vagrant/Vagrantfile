Vagrant.configure(2) do |config|
  config.vm.define :summit_rhel_deploy_target do | summit_rhel_deploy_target |
    summit_rhel_deploy_target.vm.box = "rhel-atomic-7"
    summit_rhel_deploy_target.vm.hostname = "summit-rhel-deploy-target"

#    summit_rhel_deploy_target.vm.network :private_network,
#                                         :libvirt__network_name => "containerize",
#                                         :mac => "52:54:00:b3:3e:1d"
    
    summit_rhel_deploy_target.vm.synced_folder ".", "/vagrant", disabled: true
    summit_rhel_deploy_target.vm.synced_folder ".", "/home/vagrant/sync", disabled: true

    #vagrant sync is not a fan of wildcards
    summit_rhel_deploy_target.vm.synced_folder "./sync/workspace", "/root/workspace/", type: "rsync",
                                    rsync__exclude: [ ".git/", ".#*", "*~" ]
    summit_rhel_deploy_target.vm.synced_folder "./sync/labs/*", "/root/", type: "rsync",
                                    rsync__exclude: [ ".git/", ".#*", "*~" ]
 
    # subscription manager stuff (only if vagrant-registration plugin is installed)
    if Vagrant.has_plugin?('vagrant-registration')
      if ENV['SUB_USERNAME'] then summit_rhel_deploy_target.registration.username = ENV['SUB_USERNAME'] end
      if ENV['SUB_PASSWORD'] then summit_rhel_deploy_target.registration.password = ENV['SUB_PASSWORD'] end
    end                          

    #set root password
    summit_rhel_deploy_target.vm.provision 'shell', inline: "echo -e \"redhat\\nredhat\" | (passwd --stdin root)"

    #move files to the right dirs, this handles the sorta-local repo
    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo cat /root/support_files/hosts >> /etc/hosts"

    #perform update to pull updates from the repo we just added
    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo atomic host upgrade"

    #reload (performs reboot) after doing the update
    summit_rhel_deploy_target.vm.provision :reload

    #ensure docker is configured correctly to be run by vagrant user
    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo systemctl stop docker > /dev/null 2>&1 || :" #in case this isn't first run
    
    #be sure we can reach the remote server
    summit_rhel_deploy_target.vm.provision 'shell', inline: 'sudo sed -i -e "s/# INSECURE_REGISTRY=\'--insecure-registry\'/INSECURE_REGISTRY=\'--insecure-registry summit-rhel-dev:5000\'/g" /etc/sysconfig/docker'

    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo groupadd docker > /dev/null 2>&1 || :"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo usermod -a -G docker vagrant"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo systemctl enable docker && sudo systemctl start docker"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo chown root:docker /var/run/docker.sock"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "echo 'docker setup complete'"

    #setup kubernetes & listen on all ports
    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo sed -i -e 's/KUBE_API_ADDRESS=\"--address=127.0.0.1\"/KUBE_API_ADDRESS=\"--address=0.0.0.0\"/g' /etc/kubernetes/apiserver"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "for i in kube-apiserver.service kube-controller-manager.service kubelet.service kube-proxy.service kube-scheduler.service etcd; do sudo systemctl enable $i; done"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "for i in kube-apiserver.service kube-controller-manager.service kubelet.service kube-proxy.service kube-scheduler.service etcd; do sudo systemctl restart $i; done"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "sudo kubectl get minions"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "echo 'kubernetes setup complete'"

    #pre-cache docker images
    summit_rhel_deploy_target.vm.provision 'shell', inline: "docker pull rhel"
    summit_rhel_deploy_target.vm.provision 'shell', inline: "echo 'precaching complete'"

  end
  config.vm.define :summit_rhel_dev do | summit_rhel_dev |
    summit_rhel_dev.vm.box = "rhel-server-7"
    summit_rhel_dev.vm.hostname = "summit-rhel-dev"

#    summit_rhel_dev.vm.network :private_network,
#                               :libvirt__network_name => "containerize",
#                               :mac => "52:54:00:b3:3e:1e"
    
    summit_rhel_dev.vm.synced_folder ".", "/vagrant", disabled: true
    summit_rhel_dev.vm.synced_folder ".", "/home/vagrant/sync", disabled: true

    #vagrant sync is not a fan of wildcards
    summit_rhel_dev.vm.synced_folder "./sync/workspace", "/root/workspace/", type: "rsync",
                                    rsync__exclude: [ ".git/", ".#*", "*~" ]
    summit_rhel_dev.vm.synced_folder "./sync/labs/*", "/root/", type: "rsync",
                                    rsync__exclude: [ ".git/", ".#*", "*~" ]

    #set root password
    summit_rhel_dev.vm.provision 'shell', inline: "echo -e \"redhat\\nredhat\" | (passwd --stdin root)"

    # we don't need to register this VM (going to use custom repos)
    if Vagrant.has_plugin?('vagrant-registration')
      summit_rhel_dev.registration.skip = true
    end

    #move files to the right dirs, this handles the sorta-local repo
    summit_rhel_dev.vm.provision 'shell', inline: "sudo rm -rf /etc/yum.repos.d/* && " \
                                                  "sudo mv /root/support_files/local.repo /etc/yum.repos.d/"
    summit_rhel_dev.vm.provision 'shell', inline: "sudo cat /root/support_files/hosts >> /etc/hosts"
    summit_rhel_dev.vm.provision 'shell', inline: "sudo yum clean all && sudo yum repolist"

    #perform update to pull updates from the repo we just added
    summit_rhel_dev.vm.provision 'shell', inline: "sudo yum update -y"

    #reload (performs reboot) after doing the update
    summit_rhel_dev.vm.provision :reload

    #ensure docker is configured correctly to be run by vagrant user
    summit_rhel_dev.vm.provision 'shell', inline: "sudo systemctl stop docker > /dev/null 2>&1 || :" #in case this isn't first run
    summit_rhel_dev.vm.provision 'shell', inline: "sudo groupadd docker > /dev/null 2>&1 || :"
    summit_rhel_dev.vm.provision 'shell', inline: "sudo usermod -a -G docker vagrant"
    summit_rhel_dev.vm.provision 'shell', inline: "sudo systemctl enable docker && sudo systemctl start docker"
    summit_rhel_dev.vm.provision 'shell', inline: "sudo chown root:docker /var/run/docker.sock"

    # setup for labs
    #moved these to vagrant rsync ^^^, remove this once confirmed
#    summit_rhel_dev.vm.provision 'shell', inline: "sudo mkdir -vp /root/Dockerfiles && cp -Rv /home/vagrant/sync/lab* /root/Dockerfiles"
#    summit_rhel_dev.vm.provision 'shell', inline: "sudo cp -Rv /home/vagrant/sync/workspace* /root"

    #pre-cache docker images
    summit_rhel_dev.vm.provision 'shell', inline: "sudo docker pull rhel"
    #this is failing with an insecure self-signed cert error. works in vm interactively. for now let's tag the vm since it's the same
    #summit_rhel_dev.vm.provision 'shell', inline: "docker pull registry.access.redhat.com/rhel:7.1-6"
    summit_rhel_dev.vm.provision 'shell', inline: "sudo docker tag 65de4a13fc7c registry.access.redhat.com/rhel:7.1-6"
    summit_rhel_dev.vm.provision 'shell', inline: "sudo docker pull projectatomic/atomicapp:0.1.1"

    #prebuild the mariadb atomic app. we're using prepared kube files that the student will prep in lab4.
    summit_rhel_dev.vm.provision 'shell', inline: "sudo docker build -t mariadb-atomicapp /root/lab5/mariadb/."

    #adding maria clinet for easier debugging
    summit_rhel_dev.vm.provision 'shell', inline: "sudo yum -y install mariadb"

    #add atomic CLI to dev box
    summit_rhel_dev.vm.provision 'shell', inline: "sudo yum -y install atomic"

    #Setting up kubernetes
    summit_rhel_dev.vm.provision 'shell', inline: "sudo yum -y install kubernetes etcd"
    summit_rhel_dev.vm.provision 'shell', inline: "for i in kube-apiserver.service kube-controller-manager.service kubelet.service kube-proxy.service kube-scheduler.service etcd; do sudo systemctl enable $i; done"
    summit_rhel_dev.vm.provision 'shell', inline: "for i in kube-apiserver.service kube-controller-manager.service kubelet.service kube-proxy.service kube-scheduler.service etcd; do sudo systemctl restart $i; done"
    summit_rhel_dev.vm.provision 'shell', inline: "sudo kubectl get minions"
    
    # setup for lab4
    summit_rhel_dev.vm.provision 'shell', inline: "sudo yum -y install net-tools bind-utils"


    #get latest lab files from remote 
    summit_rhel_dev.vm.provision 'shell', inline: "echo 'TODO: get the latest lab files'"

  end
end
